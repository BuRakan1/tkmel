import tkinter as tk
from tkinter import ttk, messagebox
import datetime
from tkcalendar import DateEntry
import sqlite3
from collections import defaultdict
import math


class AbsenceMonitoringSystem:
    def __init__(self, root, parent_app, colors, fonts):
        self.root = root
        self.parent_app = parent_app
        self.colors = colors
        self.fonts = fonts
        self.conn = parent_app.conn

        # تهيئة البيانات
        self.all_alerts_data = []
        self.filtered_data = []

        # إعدادات التصفح
        self.items_per_page = 50  # عدد العناصر في الصفحة الواحدة
        self.current_page = 1
        self.total_pages = 1

        self.setup_window()
        self.create_widgets()
        self.load_all_alerts_data()

    def setup_window(self):
        """إعداد نافذة نظام مراقبة الإنذارات"""
        self.window = tk.Toplevel(self.root)
        self.window.title("جميع الإنذارات والتجاوزات في كل الدورات")
        self.window.geometry("1400x800")
        self.window.configure(bg=self.colors["light"])
        self.window.grab_set()

        # توسيط النافذة
        x = (self.window.winfo_screenwidth() - 1400) // 2
        y = (self.window.winfo_screenheight() - 800) // 2
        self.window.geometry(f"1400x800+{x}+{y}")

    def create_widgets(self):
        """إنشاء عناصر الواجهة"""
        # العنوان الرئيسي
        title_frame = tk.Frame(self.window, bg="#FF6B6B", height=60)
        title_frame.pack(fill=tk.X)
        title_frame.pack_propagate(False)

        tk.Label(
            title_frame,
            text="🔔 جميع الإنذارات والتجاوزات في كل الدورات - حسب تعليمات التدريب المستديمة",
            font=self.fonts["large_title"],
            bg="#FF6B6B",
            fg="white"
        ).pack(expand=True)

        # إطار الملخص
        summary_frame = tk.Frame(self.window, bg=self.colors["light"], pady=10)
        summary_frame.pack(fill=tk.X, padx=10)

        self.summary_label = tk.Label(
            summary_frame,
            text="جاري تحليل البيانات...",
            font=self.fonts["text_bold"],
            bg=self.colors["light"]
        )
        self.summary_label.pack()

        # إطار البحث والفلترة
        filter_frame = tk.Frame(self.window, bg=self.colors["light"], pady=5)
        filter_frame.pack(fill=tk.X, padx=10)

        tk.Label(
            filter_frame,
            text="البحث:",
            font=self.fonts["text"],
            bg=self.colors["light"]
        ).pack(side=tk.RIGHT, padx=5)

        self.search_var = tk.StringVar()
        search_entry = tk.Entry(
            filter_frame,
            textvariable=self.search_var,
            font=self.fonts["text"],
            width=30
        )
        search_entry.pack(side=tk.RIGHT, padx=5)
        search_entry.bind("<KeyRelease>", lambda e: self.filter_alerts_tree())

        # خيارات الفلترة
        tk.Label(
            filter_frame,
            text="عرض:",
            font=self.fonts["text"],
            bg=self.colors["light"]
        ).pack(side=tk.RIGHT, padx=20)

        self.filter_var = tk.StringVar(value="all")
        filters = [
            ("الكل", "all"),
            ("المتجاوزين فقط", "exceeded"),
            ("التحذيرات فقط", "warning"),
            ("انتباه فقط", "danger")
        ]

        for text, value in filters:
            tk.Radiobutton(
                filter_frame,
                text=text,
                variable=self.filter_var,
                value=value,
                font=self.fonts["text"],
                bg=self.colors["light"],
                command=self.filter_alerts_tree
            ).pack(side=tk.RIGHT, padx=5)

        # إطار التصفح (Pagination)
        self.pagination_frame = tk.Frame(self.window, bg=self.colors["light"], pady=5)
        self.pagination_frame.pack(fill=tk.X, padx=10)

        # إطار القائمة
        list_frame = tk.Frame(self.window, bg=self.colors["light"], padx=10, pady=5)
        list_frame.pack(fill=tk.BOTH, expand=True)

        # Treeview للإنذارات
        columns = (
            "course", "student_name", "rank", "without", "with", "total", "status", "percentage", "course_duration")

        scroll_y = tk.Scrollbar(list_frame)
        scroll_y.pack(side=tk.RIGHT, fill=tk.Y)

        scroll_x = tk.Scrollbar(list_frame, orient=tk.HORIZONTAL)
        scroll_x.pack(side=tk.BOTTOM, fill=tk.X)

        self.alerts_tree = ttk.Treeview(
            list_frame,
            columns=columns,
            show="tree headings",
            yscrollcommand=scroll_y.set,
            xscrollcommand=scroll_x.set
        )
        self.alerts_tree.pack(fill=tk.BOTH, expand=True)
        scroll_y.config(command=self.alerts_tree.yview)
        scroll_x.config(command=self.alerts_tree.xview)

        # تعريف الأعمدة
        self.alerts_tree.column("#0", width=50, anchor=tk.CENTER)
        self.alerts_tree.column("course", width=200, anchor=tk.CENTER)
        self.alerts_tree.column("student_name", width=200, anchor=tk.CENTER)
        self.alerts_tree.column("rank", width=100, anchor=tk.CENTER)
        self.alerts_tree.column("without", width=100, anchor=tk.CENTER)
        self.alerts_tree.column("with", width=100, anchor=tk.CENTER)
        self.alerts_tree.column("total", width=80, anchor=tk.CENTER)
        self.alerts_tree.column("status", width=150, anchor=tk.CENTER)
        self.alerts_tree.column("percentage", width=100, anchor=tk.CENTER)
        self.alerts_tree.column("course_duration", width=100, anchor=tk.CENTER)

        # العناوين
        self.alerts_tree.heading("#0", text="م")
        self.alerts_tree.heading("course", text="اسم الدورة")
        self.alerts_tree.heading("student_name", text="اسم المتدرب")
        self.alerts_tree.heading("rank", text="الرتبة")
        self.alerts_tree.heading("without", text="بدون عذر")
        self.alerts_tree.heading("with", text="بعذر")
        self.alerts_tree.heading("total", text="المجموع")
        self.alerts_tree.heading("status", text="الحالة")
        self.alerts_tree.heading("percentage", text="النسبة %")
        self.alerts_tree.heading("course_duration", text="مدة الدورة")

        # الألوان
        self.alerts_tree.tag_configure("exceeded", background="#ff5252", foreground="white")
        self.alerts_tree.tag_configure("warning", background="#fff8e1")
        self.alerts_tree.tag_configure("danger", background="#ffebee")

        # ربط الحدث للنقر المزدوج
        self.alerts_tree.bind("<Double-1>", self.on_double_click)

        # إطار الأزرار
        btn_frame = tk.Frame(self.window, bg=self.colors["light"], pady=10)
        btn_frame.pack(fill=tk.X, padx=10)

        tk.Button(
            btn_frame,
            text="📋 تصدير التقرير الشامل",
            font=self.fonts["text_bold"],
            bg="#FF6B6B",
            fg="white",
            padx=20,
            pady=8,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=self.export_all_alerts_report
        ).pack(side=tk.LEFT, padx=5)

        tk.Button(
            btn_frame,
            text="📊 تصدير تقرير مفصل للدورة",
            font=self.fonts["text_bold"],
            bg=self.colors["primary"],
            fg="white",
            padx=20,
            pady=8,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=self.export_course_report
        ).pack(side=tk.LEFT, padx=5)

        tk.Button(
            btn_frame,
            text="👁️ عرض تفاصيل المتدرب",
            font=self.fonts["text_bold"],
            bg=self.colors["success"],
            fg="white",
            padx=20,
            pady=8,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=self.show_student_details
        ).pack(side=tk.LEFT, padx=5)

        tk.Button(
            btn_frame,
            text="🔄 تحديث",
            font=self.fonts["text_bold"],
            bg="#4ECDC4",  # لون أزرق فاتح
            fg="white",
            padx=20,
            pady=8,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=self.load_all_alerts_data
        ).pack(side=tk.LEFT, padx=5)

        tk.Button(
            btn_frame,
            text="إغلاق",
            font=self.fonts["text_bold"],
            bg=self.colors["dark"],
            fg="white",
            padx=20,
            pady=8,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=self.window.destroy
        ).pack(side=tk.RIGHT, padx=5)

        # تلميح في الأسفل
        hint_label = tk.Label(
            self.window,
            text="💡 تلميح: انقر نقرًا مزدوجًا على أي متدرب لعرض تفاصيل غيابه",
            font=("Tajawal", 10),
            bg=self.colors["light"],
            fg="#666"
        )
        hint_label.pack(pady=5)

    def create_pagination_controls(self):
        """إنشاء عناصر التحكم في التصفح"""
        # مسح العناصر السابقة
        for widget in self.pagination_frame.winfo_children():
            widget.destroy()

        if self.total_pages <= 1:
            return

        # إطار داخلي للتوسيط
        controls_frame = tk.Frame(self.pagination_frame, bg=self.colors["light"])
        controls_frame.pack()

        # زر الصفحة الأولى
        tk.Button(
            controls_frame,
            text="<<",
            font=self.fonts["text"],
            bg=self.colors["primary"],
            fg="white",
            width=3,
            state=tk.NORMAL if self.current_page > 1 else tk.DISABLED,
            command=lambda: self.go_to_page(1)
        ).pack(side=tk.LEFT, padx=2)

        # زر الصفحة السابقة
        tk.Button(
            controls_frame,
            text="<",
            font=self.fonts["text"],
            bg=self.colors["primary"],
            fg="white",
            width=3,
            state=tk.NORMAL if self.current_page > 1 else tk.DISABLED,
            command=lambda: self.go_to_page(self.current_page - 1)
        ).pack(side=tk.LEFT, padx=2)

        # معلومات الصفحة الحالية
        tk.Label(
            controls_frame,
            text=f"الصفحة {self.current_page} من {self.total_pages}",
            font=self.fonts["text"],
            bg=self.colors["light"]
        ).pack(side=tk.LEFT, padx=10)

        # مربع الانتقال المباشر
        tk.Label(
            controls_frame,
            text="انتقل إلى:",
            font=self.fonts["text"],
            bg=self.colors["light"]
        ).pack(side=tk.LEFT, padx=5)

        page_var = tk.StringVar(value=str(self.current_page))
        page_entry = tk.Entry(
            controls_frame,
            textvariable=page_var,
            font=self.fonts["text"],
            width=5,
            justify=tk.CENTER
        )
        page_entry.pack(side=tk.LEFT, padx=2)

        def go_to_entered_page(event=None):
            try:
                page = int(page_var.get())
                if 1 <= page <= self.total_pages:
                    self.go_to_page(page)
                else:
                    messagebox.showwarning("تنبيه", f"الرجاء إدخال رقم صفحة بين 1 و {self.total_pages}")
                    page_var.set(str(self.current_page))
            except ValueError:
                messagebox.showwarning("تنبيه", "الرجاء إدخال رقم صحيح")
                page_var.set(str(self.current_page))

        page_entry.bind('<Return>', go_to_entered_page)

        tk.Button(
            controls_frame,
            text="انتقل",
            font=self.fonts["text"],
            bg=self.colors["success"],
            fg="white",
            command=go_to_entered_page
        ).pack(side=tk.LEFT, padx=5)

        # زر الصفحة التالية
        tk.Button(
            controls_frame,
            text=">",
            font=self.fonts["text"],
            bg=self.colors["primary"],
            fg="white",
            width=3,
            state=tk.NORMAL if self.current_page < self.total_pages else tk.DISABLED,
            command=lambda: self.go_to_page(self.current_page + 1)
        ).pack(side=tk.LEFT, padx=2)

        # زر الصفحة الأخيرة
        tk.Button(
            controls_frame,
            text=">>",
            font=self.fonts["text"],
            bg=self.colors["primary"],
            fg="white",
            width=3,
            state=tk.NORMAL if self.current_page < self.total_pages else tk.DISABLED,
            command=lambda: self.go_to_page(self.total_pages)
        ).pack(side=tk.LEFT, padx=2)

        # معلومات إضافية
        tk.Label(
            controls_frame,
            text=f"(عرض {len(self.filtered_data)} سجل)",
            font=("Tajawal", 10),
            bg=self.colors["light"],
            fg="#666"
        ).pack(side=tk.LEFT, padx=10)

    def go_to_page(self, page):
        """الانتقال إلى صفحة محددة"""
        if 1 <= page <= self.total_pages:
            self.current_page = page
            self.display_current_page()

    def display_current_page(self):
        """عرض البيانات في الصفحة الحالية"""
        # مسح الشجرة
        for item in self.alerts_tree.get_children():
            self.alerts_tree.delete(item)

        # حساب نطاق البيانات للصفحة الحالية
        start_index = (self.current_page - 1) * self.items_per_page
        end_index = min(start_index + self.items_per_page, len(self.filtered_data))

        # عرض البيانات
        for i in range(start_index, end_index):
            alert = self.filtered_data[i]

            # تحديد كيفية عرض الحدود للدورات الخاصة
            without_display = f"{alert['without_excuse']}/{alert['max_without']}"
            with_display = f"{alert['with_excuse']}/{alert['max_with']}"

            # للدورات التي لا تسمح بأي غياب
            if alert['max_without'] == 0 and alert['max_with'] == 0:
                without_display = f"{alert['without_excuse']}/غير مسموح"
                with_display = f"{alert['with_excuse']}/غير مسموح"
            elif alert['max_without'] == 0:
                without_display = f"{alert['without_excuse']}/غير مسموح"

            self.alerts_tree.insert(
                "",
                tk.END,
                text=str(i + 1),
                values=(
                    alert['course'],
                    alert['student_name'],
                    alert['rank'],
                    without_display,
                    with_display,
                    alert['total'],
                    alert['status'],
                    f"{alert['percentage']:.1f}%",
                    alert['category']
                ),
                tags=(alert['tag'],)
            )

        # تحديث عناصر التحكم في التصفح
        self.create_pagination_controls()

    def determine_course_category(self, duration_days):
        """تحديد مدة الدورة وحدود الغياب المسموح"""
        if duration_days >= 85:  # 3 أشهر أو أكثر
            return "3 أشهر أو أكثر", 4, 8
        elif duration_days >= 55:  # شهرين
            return "شهرين", 2, 4
        elif duration_days >= 25:  # شهر
            return "شهر واحد", 1, 2
        elif duration_days >= 19:  # 3 أسابيع
            return "3 أسابيع", 1, 2
        elif duration_days >= 11:  # أسبوعين (11-18 يوم)
            return "أسبوعين", 0, 1  # غياب بدون عذر غير مسموح، بعذر يوم واحد
        else:  # أقل من أسبوعين (10 أيام أو أقل)
            return "أقل من أسبوعين (10 أيام أو أقل)", 0, 0  # لا يسمح بأي غياب

    def calculate_actual_absence_days(self, student_id, course_name):
        """حساب أيام الغياب الفعلية مع قاعدة الخميس-الأحد"""
        cursor = self.conn.cursor()

        # الحصول على جميع سجلات الغياب للمتدرب
        cursor.execute("""
            SELECT date, status, excuse_reason
            FROM attendance
            WHERE national_id = ? AND status IN ('غائب', 'غائب بعذر')
            ORDER BY date
        """, (student_id,))

        absence_records = cursor.fetchall()

        without_excuse_days = 0
        with_excuse_days = 0
        processed_dates = set()

        for record in absence_records:
            date_str, status, excuse_reason = record

            if date_str in processed_dates:
                continue

            processed_dates.add(date_str)

            # تحويل التاريخ
            absence_date = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()

            # حساب الأيام الأساسية
            if status == "غائب":
                days_to_add = 1

                # التحقق من قاعدة الخميس-الأحد
                weekday = absence_date.weekday()

                # إذا كان الغياب يوم الخميس (weekday = 3)
                if weekday == 3:
                    # التحقق من غياب يوم الأحد التالي
                    sunday_date = absence_date + datetime.timedelta(days=3)
                    sunday_str = sunday_date.strftime("%Y-%m-%d")

                    cursor.execute("""
                        SELECT status FROM attendance
                        WHERE national_id = ? AND date = ? AND status = 'غائب'
                    """, (student_id, sunday_str))

                    if cursor.fetchone():
                        # إذا غاب الخميس والأحد، نحسب 4 أيام
                        days_to_add = 4
                        processed_dates.add(sunday_str)

                # إذا كان الغياب يوم الأحد (weekday = 6)
                elif weekday == 6:
                    # التحقق من غياب يوم الخميس السابق
                    thursday_date = absence_date - datetime.timedelta(days=3)
                    thursday_str = thursday_date.strftime("%Y-%m-%d")

                    cursor.execute("""
                        SELECT status FROM attendance
                        WHERE national_id = ? AND date = ? AND status = 'غائب'
                    """, (student_id, thursday_str))

                    if cursor.fetchone() and thursday_str not in processed_dates:
                        # إذا غاب الخميس والأحد ولم نحسب الخميس بعد
                        days_to_add = 4
                        processed_dates.add(thursday_str)

                without_excuse_days += days_to_add

            elif status == "غائب بعذر":
                with_excuse_days += 1

        return without_excuse_days, with_excuse_days

    def load_all_alerts_data(self):
        """تحميل بيانات جميع الإنذارات"""
        cursor = self.conn.cursor()

        # الحصول على جميع الدورات النشطة
        cursor.execute("""
            SELECT DISTINCT ci.course_name, ci.end_date_system
            FROM course_info ci
            WHERE ci.end_date_system IS NOT NULL AND ci.end_date_system != ''
            ORDER BY ci.course_name
        """)

        courses = cursor.fetchall()

        all_alerts = []
        total_exceeded = 0
        total_warnings = 0
        total_danger = 0

        for course_name, end_date_str in courses:
            if not end_date_str:
                continue

            # حساب مدة الدورة
            end_date = datetime.datetime.strptime(end_date_str, "%Y-%m-%d").date()

            # الحصول على تاريخ البداية
            cursor.execute("""
                SELECT MIN(date) FROM attendance a
                JOIN trainees t ON a.national_id = t.national_id
                WHERE t.course = ?
            """, (course_name,))

            start_date_result = cursor.fetchone()
            if not start_date_result or not start_date_result[0]:
                continue

            start_date = datetime.datetime.strptime(start_date_result[0], "%Y-%m-%d").date()
            duration_days = (end_date - start_date).days + 1

            # تحديد حدود الغياب
            category, max_without, max_with = self.determine_course_category(duration_days)

            # الحصول على المتدربين في الدورة
            cursor.execute("""
                SELECT national_id, name, rank
                FROM trainees
                WHERE course = ? AND is_excluded = 0
                ORDER BY name
            """, (course_name,))

            students = cursor.fetchall()

            for student_id, name, rank in students:
                # حساب أيام الغياب
                without_excuse, with_excuse = self.calculate_actual_absence_days(student_id, course_name)
                total_absence = without_excuse + with_excuse

                # حساب النسبة
                without_percentage = 0
                with_percentage = 0

                # للدورات التي لا تسمح بأي غياب
                if max_without == 0 and without_excuse > 0:
                    without_percentage = 100  # أي غياب = تجاوز
                elif max_without > 0:
                    without_percentage = (without_excuse / max_without * 100)

                if max_with == 0 and with_excuse > 0:
                    with_percentage = 100  # أي غياب = تجاوز
                elif max_with > 0:
                    with_percentage = (with_excuse / max_with * 100)

                max_percentage = max(without_percentage, with_percentage)

                # تحديد الحالة
                status = ""
                tag = ""

                if without_excuse > max_without or with_excuse > max_with:
                    status = "تجاوز الحد المسموح"
                    tag = "exceeded"
                    total_exceeded += 1
                elif max_without == 0 and max_with == 0 and total_absence > 0:
                    # للدورات التي لا تسمح بأي غياب (أقل من أسبوعين - 10 أيام أو أقل)
                    status = "تجاوز - لا يسمح بالغياب في هذه الدورة"
                    tag = "exceeded"
                    total_exceeded += 1
                elif without_percentage >= 80 or with_percentage >= 80:
                    status = "تحذير - اقتراب من الحد"
                    tag = "warning"
                    total_warnings += 1
                elif without_percentage >= 50 or with_percentage >= 50:
                    status = "انتباه"
                    tag = "danger"
                    total_danger += 1
                else:
                    continue  # لا نعرض الآمنين

                alert_data = {
                    'course': course_name,
                    'student_id': student_id,
                    'student_name': name,
                    'rank': rank,
                    'without_excuse': without_excuse,
                    'with_excuse': with_excuse,
                    'total': total_absence,
                    'max_without': max_without,
                    'max_with': max_with,
                    'status': status,
                    'tag': tag,
                    'percentage': max_percentage,
                    'duration_days': duration_days,
                    'category': category
                }
                all_alerts.append(alert_data)

        # ترتيب حسب الخطورة
        all_alerts.sort(key=lambda x: (
            0 if x['tag'] == 'exceeded' else 1 if x['tag'] == 'warning' else 2,
            -x['percentage']
        ))

        # حفظ البيانات
        self.all_alerts_data = all_alerts
        self.filtered_data = all_alerts.copy()

        # حساب عدد الصفحات
        self.total_pages = math.ceil(len(self.filtered_data) / self.items_per_page)
        self.current_page = 1

        # عرض الصفحة الأولى
        self.display_current_page()

        # تحديث الملخص
        self.summary_label.config(
            text=f"📊 إجمالي الإنذارات: {len(all_alerts)} | "
                 f"🚫 متجاوزين: {total_exceeded} | "
                 f"⚠️ تحذيرات: {total_warnings} | "
                 f"⚡ انتباه: {total_danger}"
        )

        if total_exceeded > 0:
            messagebox.showwarning(
                "تنبيه هام",
                f"يوجد {total_exceeded} متدرب تجاوزوا الحد المسموح للغياب عبر جميع الدورات!"
            )

    def filter_alerts_tree(self):
        """فلترة شجرة الإنذارات"""
        # التحقق من وجود البيانات
        if not hasattr(self, 'all_alerts_data') or not self.all_alerts_data:
            return

        search_text = self.search_var.get().lower()
        filter_type = self.filter_var.get()

        # تطبيق الفلترة
        self.filtered_data = []

        for alert in self.all_alerts_data:
            # تطبيق فلتر النوع
            if filter_type == "exceeded" and alert['tag'] != "exceeded":
                continue
            elif filter_type == "warning" and alert['tag'] != "warning":
                continue
            elif filter_type == "danger" and alert['tag'] != "danger":
                continue

            # تطبيق فلتر البحث
            if search_text:
                if not any(search_text in str(value).lower() for value in [
                    alert['course'],
                    alert['student_name'],
                    alert['rank'],
                    alert['student_id']
                ]):
                    continue

            self.filtered_data.append(alert)

        # إعادة حساب عدد الصفحات
        self.total_pages = math.ceil(len(self.filtered_data) / self.items_per_page) if self.filtered_data else 1
        self.current_page = 1

        # عرض النتائج
        self.display_current_page()

    def on_double_click(self, event):
        """عند النقر المزدوج على متدرب"""
        self.show_student_details()

    def show_student_details(self):
        """عرض تفاصيل غياب المتدرب المحدد"""
        selection = self.alerts_tree.selection()
        if not selection:
            messagebox.showwarning("تنبيه", "الرجاء اختيار متدرب من القائمة")
            return

        # التحقق من وجود البيانات
        if not hasattr(self, 'filtered_data') or not self.filtered_data:
            messagebox.showwarning("تنبيه", "لا توجد بيانات محملة")
            return

        # الحصول على بيانات المتدرب
        item = self.alerts_tree.item(selection[0])
        item_index = int(item['text']) - 1

        # التحقق من صحة الفهرس
        if item_index < 0 or item_index >= len(self.filtered_data):
            messagebox.showwarning("تنبيه", "خطأ في تحديد البيانات")
            return

        student_data = self.filtered_data[item_index]

        student_id = student_data['student_id']
        student_name = student_data['student_name']
        course_name = student_data['course']

        # إنشاء نافذة التفاصيل
        detail_window = tk.Toplevel(self.window)
        detail_window.title(f"تفاصيل غياب: {student_name}")
        detail_window.geometry("900x600")
        detail_window.configure(bg=self.colors["light"])

        # العنوان
        title_frame = tk.Frame(detail_window, bg=self.colors["primary"], height=50)
        title_frame.pack(fill=tk.X)
        title_frame.pack_propagate(False)

        tk.Label(
            title_frame,
            text=f"سجل غياب المتدرب: {student_name} - الدورة: {course_name}",
            font=self.fonts["title"],
            bg=self.colors["primary"],
            fg="white"
        ).pack(expand=True)

        # معلومات ملخصة
        info_frame = tk.Frame(detail_window, bg="#f5f5f5", pady=10)
        info_frame.pack(fill=tk.X, padx=10, pady=10)

        # تحديد كيفية عرض المعلومات للدورات الخاصة
        without_text = f"{student_data['without_excuse']} من {student_data['max_without']} يوم"
        with_text = f"{student_data['with_excuse']} من {student_data['max_with']} يوم"

        if student_data['max_without'] == 0 and student_data['max_with'] == 0:
            without_text = f"{student_data['without_excuse']} (غير مسموح بأي غياب)"
            with_text = f"{student_data['with_excuse']} (غير مسموح بأي غياب)"
        elif student_data['max_without'] == 0:
            without_text = f"{student_data['without_excuse']} (غير مسموح بالغياب بدون عذر)"

        info_text = f"إجمالي الغياب بدون عذر: {without_text}\n"
        info_text += f"إجمالي الغياب بعذر: {with_text}\n"
        info_text += f"الحالة: {student_data['status']}\n"
        info_text += f"مدة الدورة: {student_data['category']}"

        # إضافة ملاحظة للدورات القصيرة
        if student_data['max_without'] == 0 and student_data['max_with'] == 0:
            info_text += "\n⚠️ تنبيه: هذه الدورة لا تسمح بأي غياب نهائياً"

        tk.Label(
            info_frame,
            text=info_text,
            font=self.fonts["text"],
            bg="#f5f5f5",
            justify=tk.RIGHT
        ).pack()

        # إطار التفاصيل
        detail_frame = tk.Frame(detail_window, bg=self.colors["light"], padx=10, pady=10)
        detail_frame.pack(fill=tk.BOTH, expand=True)

        # شجرة التفاصيل
        columns = ("date", "day", "status", "reason", "notes")

        tree_scroll = tk.Scrollbar(detail_frame)
        tree_scroll.pack(side=tk.RIGHT, fill=tk.Y)

        detail_tree = ttk.Treeview(
            detail_frame,
            columns=columns,
            show="headings",
            height=15,
            yscrollcommand=tree_scroll.set
        )
        detail_tree.pack(fill=tk.BOTH, expand=True)
        tree_scroll.config(command=detail_tree.yview)

        # تعريف الأعمدة
        detail_tree.column("date", width=100, anchor=tk.CENTER)
        detail_tree.column("day", width=100, anchor=tk.CENTER)
        detail_tree.column("status", width=100, anchor=tk.CENTER)
        detail_tree.column("reason", width=250, anchor=tk.CENTER)
        detail_tree.column("notes", width=200, anchor=tk.CENTER)

        # تعريف العناوين
        detail_tree.heading("date", text="التاريخ")
        detail_tree.heading("day", text="اليوم")
        detail_tree.heading("status", text="الحالة")
        detail_tree.heading("reason", text="السبب")
        detail_tree.heading("notes", text="ملاحظات")

        # تحميل سجلات الغياب
        cursor = self.conn.cursor()
        cursor.execute("""
            SELECT date, status, excuse_reason
            FROM attendance
            WHERE national_id = ? AND status IN ('غائب', 'غائب بعذر')
            ORDER BY date DESC
        """, (student_id,))

        for record in cursor.fetchall():
            date_str, status, reason = record
            date_obj = datetime.datetime.strptime(date_str, "%Y-%m-%d")
            day_name = self.get_arabic_day_name(date_obj)

            notes = ""
            # التحقق من قاعدة الخميس-الأحد
            if status == "غائب" and day_name in ["الخميس", "الأحد"]:
                if day_name == "الخميس":
                    sunday_date = date_obj + datetime.timedelta(days=3)
                    cursor.execute("""
                        SELECT status FROM attendance
                        WHERE national_id = ? AND date = ? AND status = 'غائب'
                    """, (student_id, sunday_date.strftime("%Y-%m-%d")))
                    if cursor.fetchone():
                        notes = "محسوب 4 أيام (خميس-أحد)"
                else:  # الأحد
                    thursday_date = date_obj - datetime.timedelta(days=3)
                    cursor.execute("""
                        SELECT status FROM attendance
                        WHERE national_id = ? AND date = ? AND status = 'غائب'
                    """, (student_id, thursday_date.strftime("%Y-%m-%d")))
                    if cursor.fetchone():
                        notes = "محسوب مع الخميس (4 أيام)"

            detail_tree.insert(
                "",
                tk.END,
                values=(date_str, day_name, status, reason or "-", notes)
            )

        # زر الإغلاق
        tk.Button(
            detail_window,
            text="إغلاق",
            font=self.fonts["text_bold"],
            bg=self.colors["dark"],
            fg="white",
            padx=20,
            pady=8,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=detail_window.destroy
        ).pack(pady=10)

    def get_arabic_day_name(self, date_obj):
        """الحصول على اسم اليوم بالعربية"""
        days = {
            0: "الاثنين",
            1: "الثلاثاء",
            2: "الأربعاء",
            3: "الخميس",
            4: "الجمعة",
            5: "السبت",
            6: "الأحد"
        }
        return days.get(date_obj.weekday(), "")

    def export_course_report(self):
        """تصدير تقرير مفصل للدورة المحددة"""
        selection = self.alerts_tree.selection()
        if not selection:
            messagebox.showwarning("تنبيه", "الرجاء اختيار متدرب من دورة معينة")
            return

        # التحقق من وجود البيانات
        if not hasattr(self, 'all_alerts_data') or not self.all_alerts_data:
            messagebox.showwarning("تنبيه", "لا توجد بيانات محملة")
            return

        # الحصول على اسم الدورة
        item = self.alerts_tree.item(selection[0])
        course_name = item['values'][0]

        # جمع بيانات الدورة المحددة
        course_alerts = [a for a in self.all_alerts_data if a['course'] == course_name]

        if not course_alerts:
            messagebox.showinfo("معلومات", "لا توجد بيانات للتصدير")
            return

        import pandas as pd
        from tkinter import filedialog

        # تحضير البيانات
        export_data = []
        for alert in course_alerts:
            # تحديد كيفية عرض الحدود
            without_limit = f"{alert['without_excuse']}/{alert['max_without']}"
            with_limit = f"{alert['with_excuse']}/{alert['max_with']}"

            if alert['max_without'] == 0 and alert['max_with'] == 0:
                without_limit = f"{alert['without_excuse']}/غير مسموح"
                with_limit = f"{alert['with_excuse']}/غير مسموح"
            elif alert['max_without'] == 0:
                without_limit = f"{alert['without_excuse']}/غير مسموح"

            export_data.append({
                'رقم الهوية': alert['student_id'],
                'اسم المتدرب': alert['student_name'],
                'الرتبة': alert['rank'],
                'الغياب بدون عذر': without_limit,
                'الغياب بعذر': with_limit,
                'المجموع': alert['total'],
                'الحالة': alert['status'],
                'النسبة': f"{alert['percentage']:.1f}%"
            })

        # اختيار مكان الحفظ
        export_file = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[("Excel files", "*.xlsx")],
            initialfile=f"تقرير_إنذارات_{course_name}_{datetime.datetime.now().strftime('%Y%m%d')}.xlsx"
        )

        if export_file:
            with pd.ExcelWriter(export_file, engine='xlsxwriter') as writer:
                # معلومات الدورة
                course_info = {
                    'المعلومات': ['اسم الدورة', 'مدة الدورة', 'عدد المتدربين المنذرين'],
                    'القيمة': [
                        course_name,
                        course_alerts[0]['category'],
                        len(course_alerts)
                    ]
                }
                info_df = pd.DataFrame(course_info)
                info_df.to_excel(writer, sheet_name='معلومات_الدورة', index=False)

                # تفاصيل المتدربين
                df = pd.DataFrame(export_data)
                df.to_excel(writer, sheet_name='تفاصيل_الإنذارات', index=False)

                # تنسيق
                workbook = writer.book

                # تنسيق الأوراق
                for sheet_name in ['معلومات_الدورة', 'تفاصيل_الإنذارات']:
                    worksheet = writer.sheets[sheet_name]
                    header_format = workbook.add_format({
                        'bold': True,
                        'bg_color': '#FF6B6B',
                        'font_color': 'white',
                        'border': 1,
                        'align': 'center',
                        'valign': 'vcenter'
                    })

                    # تطبيق التنسيق على الرأس
                    for col_num, value in enumerate(
                            df.columns.values if sheet_name == 'تفاصيل_الإنذارات' else info_df.columns.values):
                        worksheet.write(0, col_num, value, header_format)
                        worksheet.set_column(col_num, col_num, 20)

            messagebox.showinfo("نجاح", f"تم تصدير تقرير الدورة إلى:\n{export_file}")

    def export_all_alerts_report(self):
        """تصدير تقرير شامل بجميع الإنذارات"""
        if not hasattr(self, 'all_alerts_data') or not self.all_alerts_data:
            messagebox.showinfo("معلومات", "لا توجد إنذارات لتصديرها")
            return

        import pandas as pd
        from tkinter import filedialog

        # تحضير البيانات للتصدير
        export_data = []
        for alert in self.all_alerts_data:
            # تحديد كيفية عرض الحدود
            without_limit = f"{alert['without_excuse']}/{alert['max_without']}"
            with_limit = f"{alert['with_excuse']}/{alert['max_with']}"

            if alert['max_without'] == 0 and alert['max_with'] == 0:
                without_limit = f"{alert['without_excuse']}/غير مسموح"
                with_limit = f"{alert['with_excuse']}/غير مسموح"
            elif alert['max_without'] == 0:
                without_limit = f"{alert['without_excuse']}/غير مسموح"

            export_data.append({
                'اسم الدورة': alert['course'],
                'مدة الدورة': alert['category'],
                'رقم الهوية': alert['student_id'],
                'اسم المتدرب': alert['student_name'],
                'الرتبة': alert['rank'],
                'الغياب بدون عذر': without_limit,
                'الغياب بعذر': with_limit,
                'المجموع': alert['total'],
                'الحالة': alert['status'],
                'النسبة': f"{alert['percentage']:.1f}%"
            })

        # جمع تفاصيل الغياب لكل متدرب
        absence_details = []
        cursor = self.conn.cursor()

        for alert in self.all_alerts_data:
            # الحصول على تواريخ الغياب بدون عذر
            cursor.execute("""
                SELECT date FROM attendance
                WHERE national_id = ? AND status = 'غائب'
                ORDER BY date
            """, (alert['student_id'],))

            without_excuse_dates = [row[0] for row in cursor.fetchall()]

            # الحصول على تواريخ الغياب بعذر مع الأسباب
            cursor.execute("""
                SELECT date, excuse_reason FROM attendance
                WHERE national_id = ? AND status = 'غائب بعذر'
                ORDER BY date
            """, (alert['student_id'],))

            with_excuse_records = cursor.fetchall()

            # تحضير البيانات للتفاصيل
            absence_details.append({
                'رقم الهوية': alert['student_id'],
                'اسم المتدرب': alert['student_name'],
                'الرتبة': alert['rank'],
                'اسم الدورة': alert['course'],
                'تواريخ الغياب بدون عذر': '، '.join(without_excuse_dates) if without_excuse_dates else 'لا يوجد',
                'تواريخ الغياب بعذر': '، '.join(
                    [rec[0] for rec in with_excuse_records]) if with_excuse_records else 'لا يوجد',
                'أسباب الغياب بعذر': ' | '.join([f"{rec[0]}: {rec[1] or 'غير محدد'}" for rec in
                                                 with_excuse_records]) if with_excuse_records else 'لا يوجد'
            })

        # اختيار مكان الحفظ
        export_file = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[("Excel files", "*.xlsx")],
            initialfile=f"تقرير_الإنذارات_الشامل_{datetime.datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
        )

        if export_file:
            with pd.ExcelWriter(export_file, engine='xlsxwriter') as writer:
                # ورقة الملخص
                summary_data = {
                    'الإحصائية': [
                        'إجمالي الإنذارات',
                        'متجاوزي الحد المسموح',
                        'تحذيرات',
                        'انتباه',
                        'عدد الدورات المتأثرة'
                    ],
                    'العدد': [
                        len(self.all_alerts_data),
                        sum(1 for a in self.all_alerts_data if a['tag'] == 'exceeded'),
                        sum(1 for a in self.all_alerts_data if a['tag'] == 'warning'),
                        sum(1 for a in self.all_alerts_data if a['tag'] == 'danger'),
                        len(set(a['course'] for a in self.all_alerts_data))
                    ]
                }
                summary_df = pd.DataFrame(summary_data)
                summary_df.to_excel(writer, sheet_name='ملخص', index=False)

                # ورقة الإحصائيات العامة
                df = pd.DataFrame(export_data)
                df.to_excel(writer, sheet_name='إحصائيات_عامة', index=False)

                # ورقة تفاصيل الغياب
                details_df = pd.DataFrame(absence_details)
                details_df.to_excel(writer, sheet_name='تفاصيل_الغياب', index=False)

                # ورقة المتجاوزين فقط
                exceeded_data = [d for d in export_data if 'تجاوز' in d['الحالة']]
                if exceeded_data:
                    exceeded_df = pd.DataFrame(exceeded_data)
                    exceeded_df.to_excel(writer, sheet_name='المتجاوزين', index=False)

                # تنسيق
                workbook = writer.book

                # تنسيق جميع الأوراق
                for sheet_name in writer.sheets:
                    worksheet = writer.sheets[sheet_name]

                    # تنسيق الرأس
                    header_format = workbook.add_format({
                        'bold': True,
                        'bg_color': '#FF6B6B',
                        'font_color': 'white',
                        'border': 1,
                        'align': 'center',
                        'valign': 'vcenter'
                    })

                    # تنسيق خاص للمتجاوزين
                    if sheet_name == 'المتجاوزين':
                        header_format = workbook.add_format({
                            'bold': True,
                            'bg_color': '#FF0000',
                            'font_color': 'white',
                            'border': 1,
                            'align': 'center',
                            'valign': 'vcenter'
                        })

                    # تطبيق التنسيق
                    for col_num in range(worksheet.dim_colmax + 1):
                        worksheet.set_column(col_num, col_num, 20)

                    # توسيع عمود التواريخ وأسباب الغياب في ورقة التفاصيل
                    if sheet_name == 'تفاصيل_الغياب':
                        worksheet.set_column(4, 6, 40)  # أعمدة التواريخ والأسباب

            messagebox.showinfo("نجاح", f"تم تصدير التقرير الشامل إلى:\n{export_file}")


# دالة للتحقق من كلمة المرور
def verify_password(parent, colors, fonts):
    """نافذة التحقق من كلمة المرور"""
    password_window = tk.Toplevel(parent)
    password_window.title("التحقق من الهوية")
    password_window.geometry("400x200")
    password_window.configure(bg=colors["light"])
    password_window.grab_set()

    # توسيط النافذة
    x = (password_window.winfo_screenwidth() - 400) // 2
    y = (password_window.winfo_screenheight() - 200) // 2
    password_window.geometry(f"400x200+{x}+{y}")

    # العنوان
    tk.Label(
        password_window,
        text="الرجاء إدخال كلمة المرور",
        font=fonts["subtitle"],
        bg=colors["light"],
        fg=colors["dark"]
    ).pack(pady=20)

    # إدخال كلمة المرور
    password_var = tk.StringVar()
    password_entry = tk.Entry(
        password_window,
        textvariable=password_var,
        font=fonts["text"],
        show="*",
        width=20,
        justify=tk.CENTER
    )
    password_entry.pack(pady=10)
    password_entry.focus()

    result = {'success': False}

    def check_password():
        if password_var.get() == "123456":
            result['success'] = True
            password_window.destroy()
        else:
            messagebox.showerror("خطأ", "كلمة المرور غير صحيحة", parent=password_window)
            password_entry.delete(0, tk.END)
            password_entry.focus()

    def on_enter(event):
        check_password()

    password_entry.bind('<Return>', on_enter)

    # إطار الأزرار
    button_frame = tk.Frame(password_window, bg=colors["light"])
    button_frame.pack(pady=20)

    tk.Button(
        button_frame,
        text="تأكيد",
        font=fonts["text_bold"],
        bg=colors["success"],
        fg="white",
        padx=20,
        pady=5,
        bd=0,
        relief=tk.FLAT,
        cursor="hand2",
        command=check_password
    ).pack(side=tk.LEFT, padx=5)

    tk.Button(
        button_frame,
        text="إلغاء",
        font=fonts["text_bold"],
        bg=colors["danger"],
        fg="white",
        padx=20,
        pady=5,
        bd=0,
        relief=tk.FLAT,
        cursor="hand2",
        command=password_window.destroy
    ).pack(side=tk.LEFT, padx=5)

    # انتظار إغلاق النافذة
    password_window.wait_window()

    return result['success']


# دالة محدثة لإضافة الأيقونة في التطبيق الرئيسي مع كلمة المرور
def add_absence_monitoring_icon(self):
    """إضافة أيقونة نظام مراقبة الغياب في التطبيق الرئيسي"""
    # إضافة تبويب جديد في نافذة التطبيق الرئيسية
    if hasattr(self, 'tab_control'):
        self.absence_monitor_tab = tk.Frame(self.tab_control, bg=self.colors["light"])
        self.tab_control.add(self.absence_monitor_tab, text="مراقبة الغياب")

        # إطار للمحتوى
        content_frame = tk.Frame(self.absence_monitor_tab, bg=self.colors["light"])
        content_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # عنوان
        tk.Label(
            content_frame,
            text="نظام مراقبة الغياب والإنذارات",
            font=self.fonts["title"],
            bg=self.colors["light"],
            fg=self.colors["primary"]
        ).pack(pady=20)

        # وصف
        tk.Label(
            content_frame,
            text="نظام متقدم لمراقبة غياب المتدربين وفقاً لتعليمات التدريب المستديمة\n"
                 "يحسب الحد المسموح للغياب حسب مدة الدورة ويُصدر إنذارات تلقائية",
            font=self.fonts["text"],
            bg=self.colors["light"],
            justify=tk.CENTER
        ).pack(pady=10)

        # دالة لفتح النظام بعد التحقق من كلمة المرور
        def open_absence_system():
            if verify_password(self.root, self.colors, self.fonts):
                AbsenceMonitoringSystem(self.root, self, self.colors, self.fonts)

        # زر فتح النظام
        tk.Button(
            content_frame,
            text="فتح نظام مراقبة الغياب",
            font=self.fonts["text_bold"],
            bg=self.colors["primary"],
            fg="white",
            padx=30,
            pady=15,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=open_absence_system
        ).pack(pady=20)
